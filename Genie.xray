tokens

".." Schema Parameters Functions Keys Rules "(" ")" ":" "," group by penalty "+" "-"  max "(" ")" ";" table bonus penalty for in


patterns

#[[:print:]]+:isNewLine: 								{ nextTerminal }
[[:space:]]+								{ nextTerminal }
[[:alpha:]_]+								name
"[0-9]+\.[0-9]+(e-[0-9]+)?" 								float
[0-9]+								number
\* 								multiply
"<=|>=|<|>|!="								compop
"="								equal
"!in"								notin

rules

%topic main

Start 'x' : Params 'p' Structure 'g' Fun 'f' RuleKeys 'k' Fitness 'r'

	{ params @ x = code @ p }

	{ fnames @ x = (fnames @ f) asSet }

	{ schema @ x = code @ g }

	{ functions @ x = code @ f }

	{ tables @ x = tables @ f }

	{ mutate @ x = mutate @ g }

	{ attrs @ r = (attrs @ g), (keys @ k) }

	{ tnames @ r = tnames @ f }

	{ fitness @ x = code @ r }

	{ keycode @ x = keycode @ k }

	{ keyconsts @ x = GenieCompiler instance compileKeyConstants: keys @ k offset: (attrs @ g) size }

	{ keys @ p = keys @ k }

	{ attrs @ p = attrs @ g }

	{ fdecl @ x = (fdecl @ f) reduce:[:u :v | u,v ] }

	;


%topic structure

Structure 'x' : Schema Component + 'c' 

	{ code @ x = GenieCompiler instance compileSchema: attr @ c } 

	{ mutate @ x = GenieCompiler instance compileAttributeLayout: code @ c }

	{ attrs @ x = (raw @ c) }

	;

Component 'x' : name 'n' ":" Value 'v'
	
	{ code @ x = GenieCompiler instance compileMutateName: n value asString value: code @ v } 

	{ attr @ x =  GenieCompiler instance compileName: n value asString }

	{ val @ x = code @ v }

	{ raw @ x =  n value asString }

	{ type @ x = type @ v }
	 
	;

Value 'x' : 

	number 'n'

	{ code @ x = n value asString }

	{ type @ x = 'int' }

	|

	float 'n'

	{ code @ x = n value asString }

	{ type @ x = 'double' }

	| Range 'r'

	{ code @ x = 'interval_t({1} , {2}).at_random()' format: { b@r . e@r } }

	{ type @ x = 'interval_t' }

	| Function 'f'

	{ code @ x = (code @ f), '.at_random()' }

	;

Range 'x' : number 'b' ".." number  'e'	

	{ b@x = b value  }

	{ e@x = e value  }

	{ code @ x = '(interval_t({1},{2}))' format: { b value . e value } }

	;

Function 'x' : name 'fn' "(" Argument 'e' ")"

	{ n @ x = GenieCompiler instance compileSchemaFunctionName: fn value asString inTables: fnames @ x }

	{ key @ x = key @ e }

	{ code @ x = '{1}({2})' format:{ n @ x . code @ e } }

	;

Argument 'x' : name 'n'
	
	{ value @ x = n value asString }

	{ key @ x = 	GenieCompiler instance compileName: n value asString }

	{ code @ x = 'an_instance[{1}]' format:{key @ x } }

	| Function 'f' 

	{ key @ x = '{1}({2})' format: { n @ f . key @ f } }

	{ code @ x = (code @ f) }
	
	;

%topic fitness

RuleKeys 'x' : Keys Key + 'k' 

	{ keys @ x = keys @ k }

	{ keycode @ x = code @ k fold:[:u :v | u, String lfString, v ] }

	;

Key 'x' : name 'kn' ":" Function 'f' 

	{ keys @ x = { kn value asString } }

	{ code @ x = GenieCompiler instance compileKey: kn value asString value: code@f  }

	;

Fitness 'x' : Rules Rule + 'r'

	{ code @ x = (code @ r) fold:[:acc :each | acc , String lfString , String lfString, each ] }

	;

Rule 'x' : bonus Group 'a' 

	{ kind @ a = 1 }

	{ code @ x = code @ a }

	| penalty Group 'a'

	{ kind @ a = -1 }

	{ code @ x = code @ a }
;
 
Group 'x' : group by "(" Arguments 'a' ")" Expr 'e'  ";"
	 
	{ code @ x = GenieCompiler instance compileRuleGroupByKeys: keys @ a expr: value @ e kind: kind @ x }

	{ group @ e = 1 }

	| for name 'index' in name 'tab' "(" name 'key1' "," name 'key2' ")" E 'e' ";"
 
	{ code @ x = GenieCompiler instance compileTableExpr: tab index: index key: key1 key: key2 expr: value @ e kind: kind @ x }
	{ locals @ e = { index value asString } asSet }

	| Expr 'e' ";"

	{ code @ x = GenieCompiler instance compileRuleExpr: value @ e kind: kind @ x }

	{ group @ e = 0 }

	;

Expr 'x' : Expr 'left' max Term 'right'  

	{ value @ x = '(max(({1}),({2})))' format:{ value @ left . value @ right }  }

	| Compare 'c'

	{ value @ x = value @ c }

	;

Compare 'x' : Compare 'left' compop 'op' Term 'right' 

	{ value @ x = '(int)(({1}) {2} ({3}))' format: { value @ left . (op value asString) . value @ right } }

	| Compare 'left' equal Term 'right' 

	{ value @ x = '(int)(({1}) == ({2}))' format: { value @ left . value @ right } }

	| Compare 'left' notin Term 'right' 

	{ value @ x = '(int)(!({2}).contains({1}))' format: { value @ left . value @ right } }

	| Term 't'

	{ value @ x = value @ t }

	;

Term 'x' : Term 'left' "+" Factor 'right'

	{ value @ x = '(({1}) + ({2}))' format:{ value @ left . value @ right } }

	| Term 'left' "-" Factor 'right'
	
	{ value @ x = '(({1}) - ({2}))' format:{ value @ left . value @ right } }

	| Factor 'y'  

	{ value @ x = value @ y }
	;

Factor 'x' : Primitive 'p'

	{ value @ x = value @ p }

	| Factor 'left' multiply Primitive 'right'

	{ value @ x = '(({1}) * ({2}))' format:  { value @ left . value @ right }  }

	;

Primitive 'x' : number 'n' 

	 { value@x = n value asString }

	| name 'n' "(" E 'e' ")" 

	{ locals @ e = Set new }

	{ value @ x = GenieCompiler instance compileRulePrimitiveCallName: n value expr: value @ e group: group@x }

	| name 'n' 

	{ value @ x = '(*each)[{1}]' format: { GenieCompiler instance compileRuleName: n value asString isMemberIn: attrs @ x } } 

	| "(" Compare 'c' ")" 

	{ value @ x = value @ c }

	;

E 'x' : E 'left' ".." T 'right'

	{ value @ x = 'interval_t({1}, {2})' format: { value @ left . value @ right } }

	| T 't'

	{ value @ x = value @ t }

	;

T 'x' : T 'left' "+" F 'right'

	{ value @ x = '({1}) + ({2})' format: { value @ left . value @ right } }

	| F 'f'

	{ value @ x = value @ f }

	;

F 'x' : name 'n'

	{ value @ x = GenieCompiler instance compileRuleVariable: n value asString attrs: (attrs @ x) locals: (locals @ x)  }

	| name 'n' "(" Es 'e' ")" 

	{ value @ x = GenieCompiler instance compileRuleInnerCall: n value asString args: value @ e}

	| number 'n'
	
	{ value @ x = n value }

	;

Es 'x' : E 'e' 
	
	| Es 'list' "," E 'e'

	;

Arguments 'x' : Argument 'a' 

	{ keys @ x = { key @ a  } }

	| Arguments 'xs' "," Argument 'a'  

	{ keys @ x = (keys @ xs) , { key @ a } }

	;

%topic functions

Fun 'x' : Functions Table + 't' 

	{ code @ x = code @ t reduce:[:u :v | u, String lfString, v] }

	{ fnames @ x = fname @ t }

	{ fdecl @ x = fdecl @ t }

	{ tables @ x = table @ t reduce:[:u :v | u, String lfString, v] }

	{ tnames @ x = tname @ t }
	;

Table 'x' : name 'n' Tuple + 't' 

	{ code @ x =  GenieCompiler instance compileFunction: v@t name: n value asString type: type @ t }
	
	{ fname @ x = { n value asString } }

	{ fdecl @ x = GenieCompiler instance compileFunctionDeclaration: n value asString type: type @ t }

	;

Tuple 'x' : Range 'r' Seq 's'
	
	{ v @ x = GenieCompiler instance compileTupleRangeBegin: b@r end:e@r seq: v@s }

	{ type @ x = type @ s }

	;

Tuple 'x' : Seq 'left' Seq 'right'
	 
	{ v @ x = GenieCompiler instance compileTuple: v@left seq: v@right }

	{ type @ x = type @ right }

;

Tuple 'x' : Seq 'seq' Range 'r'

	{ v @ x = GenieCompiler instance compileTuple: v@seq range: code@r }

	{ type @ x = GenieCompiler rangeType }

	;

Table 'x' : table name 'n' Triple + 't'  

	{ table @ x =  GenieCompiler instance compileTripleTable: v@t name: n value asString }
	
	{ tname @ x = { n value asString } }
	
	;

Triple 'x' : number 'a1' number 'a2' Range 'y'

	{ v @ x = GenieCompiler instance compileTriple: a1 value and: a2 value range: code@y }

	 ;

Seq 'x' : 

	number 'n'
	
	{ v @ x = { n value asString } }

	{ type @ x = GenieCompiler numberType }

	| Seq 'seq' "," number 'n'
	
	{ v @ x = (v @ seq) , { n value asString } }

	{ type @ x = GenieCompiler seqType }

	;


%topic parameters

Params 'x' : Parameters Component + 'c' 

	{ code @ x = GenieCompiler instance compileParameters: attr @ c values: val @ c types: type @ c  }

	;