tokens

".." Gene Parameters Rules "(" ")" ":" "," group by penalty "+" "-"  max "(" ")" ";"


patterns

#[[:print:]]+:isNewLine: { nextTerminal }
[[:space:]]+					{ nextTerminal }
[[:alpha:]]+					name
[0-9]+					number
\* 					multiply
"<=|>=|!=|=|<|>"					compop

rules

%topic unclassified

S : G P R ;

G 'x' : Gene name 'n' Component + 'c' 

	{ schema @ x = 'Object subclass: {1} instanceVariableNames: {2} classVariableNames: 
	poolDictionaries: category: Darwin' format: { n value . (var @ c) fold:[:acc :each | acc , ',' , each ] } } 

	{ code @ x = (var @ c) collect:[:each | '{1} ^{1}' format: { each } ] }

	{ mutate @ x = 'mutate ', ( (code @ c) fold:[:acc :each | acc, ' ', each] ) }
	;

Component 'x' : name 'n' ":" Value 'v'
	
	{ code @ x = '{1} _ {2}.'	 format: { n value . code @ v } } 

	{ var @ x = n value  asString }

	;

Value 'x' : 
	Range 'r'

	{ code @ x = '({1} to: {2}) atRandom' format: { b@r . e@r } }

	| Function 'f'

	{ code @ x = 'self {1}({2})' format: { (n@f) , (Character codePoint:58) asString  . e@f } };

Range 'x' : number 'b' ".." number  'e'	

	{ b@x = b value  }

	{ e@x = e value  };

P : Parameters Table + ;

Table : name Tuple + ;

Tuple : Range Seq  ;

Tuple 't' : number 'n' Seq 'seq'
	 
	{ v @ t = (v @ seq) size = 1 ifTrue: [ ' arg = {1} ifTrue:[^{2}]' format:{ n value . (v @ seq) first } ]  ifFalse:['arg = {1} ifTrue:[^{2} atRandom]' format: { n value . (v@seq) asString } ] };

Seq 'x' : 

	number 'n'
	
	{ v @ x = { n value asString } }

	| Range 'r'	
	
	{ v @ x = '({1} to: {2})' format: { b@r . e@r } }

	| Seq 'seq' "," number 'n'
	
	{ v @ x = (v @ seq) , { n value asString } }

	;

R : Rules Rule + ;

Rule 'x' : group by "(" Names 'ns' ")" Expr 'e'  ";"
	 
	{ code @ x = 'instances groupBy:[:each | {1} {2} {3} ] :: sum: [:group | {4} ]' format: { Character codePoint:123 . ((names @ ns) collect:[:each | 'each ', each]) fold:[:acc :each | acc , '.' , each ]  . Character codePoint:125 . value @ e } }
 
	| Expr 'e' ";"

	{ code @ x = 'instances sum:[:each | {1} ]' format:{ value @ e } }

	;

Expr 'x' : Expr 'left' max Term 'right'  

	{ value @ x = '(({1}) max: ({2}))' format:{ value @ left . value @ right }  }

	| Compare 'c'

	{ value @ x = value @ c }

	;

Compare 'x' : Compare 'left' compop 'op' Term 'right' 

	{ value @ x = '((({1}) {2} ({3})) ifTrue:[1] ifFalse:[0])' format: { value @ left . op value asString . value @ right } }

	| Term 't'

	{ value @ x = value @ t }

	;

Term 'x' : Term 'left' "+" Factor 'right'

	{ value @ x = '(({1}) + ({2}))' format:{ value @ left . value @ right } }

	| Term 'left' "-" Factor 'right'
	
	{ value @ x = '(({1}) - ({2}))' format:{ value @ left . value @ right } }

	| Factor 'y'  

	{ value @ x = value @ y }
	;

Factor 'x' : Primitive 'p'

	{ value @ x = value @ p }

	| Factor 'left' multiply Primitive 'right'

	{ value @ x = '(({1}) * ({2}))' format:  { value @ left . value @ right }  }

	;

Primitive 'x' : number 'n' 

	 { value@x = n value asString }

	| name 'n' "(" E 'e' ")" 

	{ value @ x = 'group {1}[:each | {2} ]' format:{n value, ((Character codePoint:58) asString) . value @ e} }

	| name 'n' 

	{ value @ x = 'each ', n value asString } 

	| "(" Compare 'c' ")" 

	{ value @ x = value @ c }

	;

E 'x' : E 'left' ".." T 'right'

	{ value @ x = '({1}) to: ({2})' format: { value @ left . value @ right } }

	| T 't'

	{ value @ x = value @ t };

T 'x' : T 'left' "+" F 'right'

	{ value @ x = '({1}) + ({2})' format: { value @ left . value @ right } }

	| F 'f'

	{ value @ x = value @ f }
	;

F 'x' : name 'n'

	{ value @ x = 'each ', n value }

	| number 'n'
	
	{ value @ x = n value }

	;

Names 'x' : name 'n' 

	{ names @ x = { n value asString} }

	| Names 'xs' "," name 'n'  

	{ names @ x = (names @ xs) , { n value asString } }

	;

Function 'x' : name 'n' "(" name 'e' ")"

	{ n @ x = n value }

	{ e @ x = e value }

	;